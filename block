<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tetris Game</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #000;
            color: white;
        }

        .game-container {
            display: grid;
            grid-template-columns: repeat(10, 20px);
            grid-template-rows: repeat(20, 20px);
            gap: 1px;
            border: 2px solid white;
            background-color: #333;
        }

        .grid-item {
            width: 20px;
            height: 20px;
            background-color: #000;
        }

        .filled {
            background-color: white;
        }
    </style>
</head>
<body>

    <div class="game-container" id="game-board">
        <!-- The game grid will be generated here -->
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const grid = document.querySelector('#game-board');
            const width = 10;
            const height = 20;
            const gridSize = width * height;
            const squares = [];
            let currentPosition = 4;
            let currentRotation = 0;

            // Create the grid
            for (let i = 0; i < gridSize; i++) {
                const div = document.createElement('div');
                div.classList.add('grid-item');
                grid.appendChild(div);
                squares.push(div);
            }

            // Define Tetriminoes (Tetrominoes)
            const lTetromino = [
                [1, width+1, width*2+1, 2],
                [width, width+1, width+2, width*2+2],
                [1, width+1, width*2+1, width*2],
                [width, width*2, width*2+1, width*2+2]
            ];

            const tTetromino = [
                [1, width, width+1, width+2],
                [1, width+1, width+2, width*2+1],
                [width, width+1, width+2, width*2+1],
                [1, width, width+1, width*2+1]
            ];

            const oTetromino = [
                [0, 1, width, width+1],
                [0, 1, width, width+1],
                [0, 1, width, width+1],
                [0, 1, width, width+1]
            ];

            const iTetromino = [
                [1, width+1, width*2+1, width*3+1],
                [width, width+1, width+2, width+3],
                [1, width+1, width*2+1, width*3+1],
                [width, width+1, width+2, width+3]
            ];

            const tetrominoes = [lTetromino, tTetromino, oTetromino, iTetromino];
            let random = Math.floor(Math.random() * tetrominoes.length);
            let current = tetrominoes[random][currentRotation];

            // Draw the Tetromino
            function draw() {
                current.forEach(index => {
                    squares[currentPosition + index].classList.add('filled');
                });
            }

            // Undraw the Tetromino
            function undraw() {
                current.forEach(index => {
                    squares[currentPosition + index].classList.remove('filled');
                });
            }

            // Move the Tetromino down
            function moveDown() {
                undraw();
                currentPosition += width;
                draw();
                freeze();
            }

            // Freeze the Tetromino
            function freeze() {
                if (current.some(index => squares[currentPosition + index + width].classList.contains('filled'))) {
                    current.forEach(index => squares[currentPosition + index].classList.add('filled'));
                    random = Math.floor(Math.random() * tetrominoes.length);
                    current = tetrominoes[random][currentRotation];
                    currentPosition = 4;
                    draw();
                }
            }

            // Control the Tetromino with the keyboard
            function control(e) {
                if (e.keyCode === 37) {
                    moveLeft();
                } else if (e.keyCode === 38) {
                    rotate();
                } else if (e.keyCode === 39) {
                    moveRight();
                } else if (e.keyCode === 40) {
                    moveDown();
                }
            }
            document.addEventListener('keydown', control);

            // Move Tetromino left
            function moveLeft() {
                undraw();
                const isAtLeftEdge = current.some(index => (currentPosition + index) % width === 0);
                if (!isAtLeftEdge) currentPosition -= 1;
                draw();
            }

            // Move Tetromino right
            function moveRight() {
                undraw();
                const isAtRightEdge = current.some(index => (currentPosition + index) % width === width - 1);
                if (!isAtRightEdge) currentPosition += 1;
                draw();
            }

            // Rotate the Tetromino
            function rotate() {
                undraw();
                currentRotation++;
                if (currentRotation === current.length) {
                    currentRotation = 0;
                }
                current = tetrominoes[random][currentRotation];
                draw();
            }

            // Start the game
            setInterval(moveDown, 1000);
        });
    </script>

</body>
</html>
